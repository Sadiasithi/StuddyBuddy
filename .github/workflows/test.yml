name: Tests and Build

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install Root Dependencies
      run: npm install
    
    - name: Install Backend Dependencies
      run: |
        cd backend
        npm ci
    
    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run Backend Tests
      run: |
        cd backend
        npm test
      env:
        NODE_ENV: test
        POSTGRES_URI: postgresql://postgres:postgres@localhost:5432/testdb
        JWT_SECRET: ${{ secrets.JWT_SECRET || 'test-secret' }}
    
    - name: Run Frontend Tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
      env:
        CI: true
        REACT_APP_BASE_URL: http://localhost:4000
        REACT_APP_GOOGLE_CLIENT_ID: ${{ secrets.REACT_APP_GOOGLE_CLIENT_ID || 'test-client-id' }}

  # Note: This workflow only runs tests and builds for development
  # Production deployment is handled by deploy.yml workflow
  
  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create Test Environment File
      run: |
        echo "PORT=4000" > .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET || 'test-secret' }}" >> .env
        echo "EMAIL_USER=${{ secrets.EMAIL_USER || 'test@example.com' }}" >> .env
        echo "EMAIL_PASS=${{ secrets.EMAIL_PASS || 'testpass' }}" >> .env
        echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY || 'test-key' }}" >> .env
        echo "REACT_APP_GOOGLE_CLIENT_ID=${{ secrets.REACT_APP_GOOGLE_CLIENT_ID || 'test-client-id' }}" >> .env
        echo "REACT_APP_BASE_URL=http://localhost:4000" >> .env
        echo "BACKEND_URL=http://localhost:4000" >> .env
        echo "FRONTEND_URL=http://localhost" >> .env
        echo "POSTGRES_URI=postgresql://postgres:postgres@postgres:5432/postgres" >> .env
        echo "COMPOSE_PROJECT_NAME=studdybuddy-test" >> .env
    
    - name: Test Docker Build
      run: |
        docker compose build --no-cache
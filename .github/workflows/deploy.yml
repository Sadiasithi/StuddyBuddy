name: StuddyBuddy CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  AZURE_VM_IP: ${{ secrets.AZURE_VM_IP }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install Dependencies
      run: |
        # Install root dependencies
        npm install
        
        # Install backend dependencies
        cd backend
        npm ci
        
        # Install frontend dependencies
        cd ../frontend
        npm ci
    
    - name: Run Backend Tests
      run: |
        cd backend
        npm test
      env:
        NODE_ENV: test
        POSTGRES_URI: postgresql://postgres:postgres@localhost:5432/testdb
        JWT_SECRET: test-secret-key
        GEMINI_API_KEY: test
        REACT_APP_GOOGLE_CLIENT_ID: test
    
    - name: Run Frontend Tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
      env:
        CI: true
        REACT_APP_BASE_URL: http://localhost:4000
        REACT_APP_GOOGLE_CLIENT_ID: test-client-id

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Test Docker Build
      run: |
        # Create a test environment file
        echo "PORT=4000" > .env
        echo "JWT_SECRET=test-secret" >> .env
        echo "EMAIL_USER=test@example.com" >> .env
        echo "EMAIL_PASS=testpass" >> .env
        echo "GEMINI_API_KEY=test-key" >> .env
        echo "REACT_APP_GOOGLE_CLIENT_ID=test-client-id" >> .env
        echo "REACT_APP_BASE_URL=http://localhost:4000" >> .env
        echo "BACKEND_URL=http://localhost:4000" >> .env
        echo "FRONTEND_URL=http://localhost" >> .env
        echo "POSTGRES_URI=postgresql://postgres:postgres@localhost:5432/postgres" >> .env
        echo "COMPOSE_PROJECT_NAME=studdybuddy" >> .env
        
        # Test building the images
        # GitHub Actions runners use Docker Compose V2
        docker compose build --no-cache

  deploy:
    name: Deploy to Azure VM
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to Azure VM
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.AZURE_VM_IP }}
        username: ${{ secrets.AZURE_VM_USERNAME }}
        key: ${{ secrets.AZURE_VM_PRIVATE_KEY }}
        port: 22
        script: |
          # Colors for output
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          BLUE='\033[0;34m'
          NC='\033[0m'
          
          print_status() {
              echo -e "${BLUE}[INFO]${NC} $1"
          }
          
          print_success() {
              echo -e "${GREEN}[SUCCESS]${NC} $1"
          }
          
          print_error() {
              echo -e "${RED}[ERROR]${NC} $1"
          }
          
          # Set project directory
          PROJECT_DIR="/home/${{ secrets.AZURE_VM_USERNAME }}/StuddyBuddy"
          
          print_status "Starting deployment to Azure VM..."
          
          # Navigate to project directory or clone if not exists
          if [ -d "$PROJECT_DIR" ]; then
              print_status "Project directory exists, updating..."
              cd "$PROJECT_DIR"
              git fetch origin
              git reset --hard origin/main
              git clean -fd
          else
              print_status "Cloning repository..."
              git clone https://github.com/${{ github.repository }}.git "$PROJECT_DIR"
              cd "$PROJECT_DIR"
          fi
          
          # Create production environment file
          print_status "Creating production environment file..."
          cat > .env << EOF
          # Production Environment Variables
          PORT=4000
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          EMAIL_USER=${{ secrets.EMAIL_USER }}
          EMAIL_PASS=${{ secrets.EMAIL_PASS }}
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          REACT_APP_GOOGLE_CLIENT_ID=${{ secrets.REACT_APP_GOOGLE_CLIENT_ID }}
          
          # Azure VM URLs
          REACT_APP_BASE_URL=http://${{ secrets.AZURE_VM_IP }}:4000
          BACKEND_URL=http://${{ secrets.AZURE_VM_IP }}:4000
          FRONTEND_URL=http://${{ secrets.AZURE_VM_IP }}
          
          # Database Configuration (localhost since PostgreSQL is on same VM)
          POSTGRES_URI=postgresql://postgres:postgres@localhost:5432/postgres
          
          # Docker Configuration
          COMPOSE_PROJECT_NAME=studdybuddy
          VM_PUBLIC_IP=${{ secrets.AZURE_VM_IP }}
          VM_PRIVATE_IP=10.1.0.4
          EOF
          
          # Stop existing containers
          print_status "Stopping existing containers..."
          docker-compose down || true
          
          # Clean up Docker resources
          print_status "Cleaning up Docker resources..."
          docker system prune -f
          
          # Build and start new containers
          print_status "Building and starting containers..."
          docker-compose up -d --build --remove-orphans
          
          # Wait for services to be ready
          print_status "Waiting for services to start..."
          sleep 60
          
          # Check deployment status
          print_status "Checking deployment status..."
          docker-compose ps
          
          # Health check
          print_status "Running health checks..."
          
          # Check backend
          if curl -f http://localhost:4000/ 2>/dev/null; then
              print_success "Backend is healthy"
          else
              print_error "Backend health check failed"
              docker-compose logs backend
          fi
          
          # Check frontend
          if curl -f http://localhost/ 2>/dev/null; then
              print_success "Frontend is accessible"
          else
              print_error "Frontend health check failed"
              docker-compose logs frontend
          fi
          
          print_success "Deployment completed!"
          echo ""
          echo "🌐 Application URLs:"
          echo "   Frontend: http://${{ secrets.AZURE_VM_IP }}"
          echo "   Backend API: http://${{ secrets.AZURE_VM_IP }}:4000"
          echo ""
          echo "📊 Container Status:"
          docker-compose ps

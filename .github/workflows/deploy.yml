name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  VM_IP: ${{ secrets.AZURE_VM_IP }}
  PROJECT_DIR: '/home/azureuser/StuddyBuddy'

jobs:
  deploy:
    name: Deploy to Azure VM
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Azure VM
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        port: 22
        command_timeout: 30m
        script: |
          echo "🚀 Starting deployment to Azure VM..."
          
          # Set error handling
          set -e
          
          # Navigate to project directory or clone if doesn't exist
          if [ -d "${{ env.PROJECT_DIR }}" ]; then
            echo "📁 Project directory exists, updating..."
            cd ${{ env.PROJECT_DIR }}
            git fetch origin
            git reset --hard origin/main
            git clean -fd
          else
            echo "📁 Cloning repository..."
            git clone https://github.com/${{ github.repository }}.git ${{ env.PROJECT_DIR }}
            cd ${{ env.PROJECT_DIR }}
          fi
          
          # Create production environment file
          echo "🔧 Creating environment configuration..."
          cat > .env << EOF
          # Production Environment Variables
          PORT=4000
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          EMAIL_USER=${{ secrets.EMAIL_USER }}
          EMAIL_PASS=${{ secrets.EMAIL_PASS }}
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          REACT_APP_GOOGLE_CLIENT_ID=${{ secrets.REACT_APP_GOOGLE_CLIENT_ID }}
          
          # Azure VM URLs
          REACT_APP_BASE_URL=http://${{ env.VM_IP }}:4000
          BACKEND_URL=http://${{ env.VM_IP }}:4000
          FRONTEND_URL=http://${{ env.VM_IP }}
          
          # Database Configuration
          POSTGRES_URI=postgresql://postgres:postgres@postgres:5432/postgres
          
          # Docker Configuration
          COMPOSE_PROJECT_NAME=studdybuddy
          VM_PUBLIC_IP=${{ env.VM_IP }}
          VM_PRIVATE_IP=10.1.0.4
          EOF
          
          # Stop existing containers
          echo "🛑 Stopping existing containers..."
          docker-compose down --remove-orphans || true
          
          # Clean up old images and containers
          echo "🧹 Cleaning up old Docker resources..."
          docker system prune -f
          docker volume prune -f || true
          
          # Build and start new containers
          echo "🔨 Building and starting containers..."
          docker-compose up -d --build --remove-orphans --force-recreate
          
          # Wait for services to be ready
          echo "⏳ Waiting for services to start..."
          sleep 30
          
          # Health check
          echo "🏥 Performing health checks..."
          
          # Wait for containers to be fully ready
          echo "⏳ Waiting for containers to initialize..."
          sleep 30
          
          # Check Docker containers status
          echo "📊 Container status:"
          docker-compose ps
          
          # Check backend health with retry
          echo "🔍 Checking backend health..."
          BACKEND_READY=false
          for i in {1..15}; do
            if curl -f --max-time 10 http://localhost:4000/ >/dev/null 2>&1; then
              echo "✅ Backend is healthy"
              BACKEND_READY=true
              break
            else
              echo "⏳ Waiting for backend... (attempt $i/15)"
              sleep 10
            fi
          done
          
          if [ "$BACKEND_READY" = false ]; then
            echo "❌ Backend health check failed after 15 attempts"
            echo "📋 Backend logs:"
            docker-compose logs backend --tail=50
            exit 1
          fi
          
          # Check frontend health with retry
          echo "🔍 Checking frontend health..."
          FRONTEND_READY=false
          for i in {1..10}; do
            if curl -f --max-time 10 http://localhost/ >/dev/null 2>&1; then
              echo "✅ Frontend is healthy"
              FRONTEND_READY=true
              break
            else
              echo "⏳ Waiting for frontend... (attempt $i/10)"
              sleep 10
            fi
          done
          
          if [ "$FRONTEND_READY" = false ]; then
            echo "❌ Frontend health check failed after 10 attempts"
            echo "📋 Frontend logs:"
            docker-compose logs frontend --tail=50
            # Don't exit here as frontend might still work externally
          fi
          
          # Show final status
          echo "📊 Final deployment status:"
          docker-compose ps
          
          # Show recent logs
          echo "📋 Recent logs:"
          docker-compose logs --tail=20
          
          echo "🎉 Deployment completed successfully!"
          echo "📱 Application URLs:"
          echo "   Frontend: http://${{ env.VM_IP }}"
          echo "   Backend API: http://${{ env.VM_IP }}:4000"
    
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi

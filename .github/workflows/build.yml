name: StuddyBuddy CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  VM_IP: '135.235.137.78'
  PROJECT_DIR: '/home/azureuser/StuddyBuddy'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install Root Dependencies
      run: npm install
    
    - name: Install Backend Dependencies
      run: |
        cd backend
        npm ci
    
    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run Backend Tests
      run: |
        cd backend
        npm test
      env:
        NODE_ENV: test
        POSTGRES_URI: postgresql://postgres:postgres@localhost:5432/postgres
        JWT_SECRET: test-secret
    
    - name: Run Frontend Tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
      env:
        CI: true
        REACT_APP_BASE_URL: http://localhost:4000
        REACT_APP_GOOGLE_CLIENT_ID: test-client-id

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create Environment File
      run: |
        echo "PORT=4000" > .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        echo "EMAIL_USER=${{ secrets.EMAIL_USER }}" >> .env
        echo "EMAIL_PASS=${{ secrets.EMAIL_PASS }}" >> .env
        echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env
        echo "REACT_APP_GOOGLE_CLIENT_ID=${{ secrets.REACT_APP_GOOGLE_CLIENT_ID }}" >> .env
        echo "REACT_APP_BASE_URL=http://${{ secrets.VM_HOST }}:4000" >> .env
        echo "BACKEND_URL=http://${{ secrets.VM_HOST }}:4000" >> .env
        echo "FRONTEND_URL=http://${{ secrets.VM_HOST }}" >> .env
        echo "POSTGRES_URI=postgresql://postgres:postgres@host.docker.internal:5432/postgres" >> .env
        echo "COMPOSE_PROJECT_NAME=studdybuddy" >> .env
    
    - name: Test Docker Build
      run: |
        docker-compose build --no-cache
    
    - name: Deploy to Azure VM
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USERNAME }}
        key: ${{ secrets.VM_PRIVATE_KEY }}
        port: ${{ secrets.VM_PORT || 22 }}
        script: |
          # Navigate to project directory
          cd /home/${{ secrets.VM_USERNAME }}/StuddyBuddy || {
            echo "Project directory not found, cloning..."
            git clone https://github.com/${{ github.repository }}.git StuddyBuddy
            cd StuddyBuddy
          }
          
          # Pull latest changes
          git fetch origin
          git reset --hard origin/main
          
          # Create Azure production environment file
          cat > .env << EOF
          PORT=4000
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          EMAIL_USER=${{ secrets.EMAIL_USER }}
          EMAIL_PASS=${{ secrets.EMAIL_PASS }}
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          REACT_APP_GOOGLE_CLIENT_ID=${{ secrets.REACT_APP_GOOGLE_CLIENT_ID }}
          REACT_APP_BASE_URL=http://135.235.137.78:4000
          BACKEND_URL=http://135.235.137.78:4000
          FRONTEND_URL=http://135.235.137.78
          POSTGRES_URI=postgresql://postgres:postgres@host.docker.internal:5432/postgres
          COMPOSE_PROJECT_NAME=studdybuddy
          VM_PUBLIC_IP=135.235.137.78
          VM_PRIVATE_IP=10.1.0.4
          EOF
          
          # Stop existing containers
          docker-compose down || true
          
          # Remove old images to free space
          docker system prune -f
          
          # Build and start new containers
          docker-compose up -d --build --remove-orphans
          
          # Wait for services to be ready (Azure VMs need more time)
          sleep 45
          
          # Check deployment status
          docker-compose ps
          
          # Show logs for debugging
          docker-compose logs --tail=50